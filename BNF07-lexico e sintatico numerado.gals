#Options
GenerateScanner = true
GenerateParser = true
Language = Java
ScannerName = Lexico
ParserName = Sintatico
SemanticName = Semantico
ScannerCaseSensitive = true
ScannerTable = Compact
Input = String
Parser = LL
#RegularDefinitions
mai: [A-Z]
min: [a-z]

letra: {mai} | {min}

dig: [0-9]

iden: (_?({dig} | {letra})+)*

num: [1-9]
#Tokens
//id: {letra}+ {dig}*

identificador: {letra}{iden}

constante_int: {dig}*{num} (({num}d{num})? | (d{num}))?{dig}* | {dig}+
 
constante_float: {dig}*\.(({dig}* {num}d{num}{dig}*)|{dig}+)

constante_char: \\(n|s|t)

constante_string: \"[^\"\n\\]*\"

:! #[^\n]*

:! \[\n [^\[\]]* \n\]

pr_boolean = identificador: "boolean"
pr_char = identificador: "char"
pr_break = identificador: "break"
pr_do = identificador: "do"
pr_else = identificador: "else"
pr_end = identificador: "end"
pr_false = identificador: "false"
pr_float = identificador: "float"
pr_fun = identificador: "fun"
pr_if = identificador: "if"
pr_int = identificador: "int"
pr_main = identificador: "main"
pr_print = identificador: "print"
pr_println = identificador: "println"
pr_readln = identificador: "readln"
pr_string = identificador: "string"
pr_true = identificador: "true"
pr_val = identificador: "val"
pr_var = identificador: "var"
pr_while = identificador: "while"

// simbolos especiais : , ; = ( ) { } == != < > + - * / % && || ! ++ -- 
":"
","
";"
"="
"("
")"
"{"
"}"
"=="
"!="
"<"
">"
"+"
"-"
"*"
"/"
"%"
"&&"
"||"
"!"


// reconhecer e ignorar caracteres de formataï¿½ï¿½o
:[\s \t \n]


#NonTerminals
<programa>

<lista_intrucoes>
<intrucoes>
<declaracoes_constantes>
<declaracao_variaveis>
<lista_id>
<tipo>
<valor>
<comando>
<atribuicao>
<entrada_dados>
<opcional_const_string>
<saida_dados>
<lista_expressoes>
<selecao>
<opcional_selecao_else>
<repeticao>
<lista_comandos>
<expressao>
<expressao_>
<elemento>
<relacional>
<relacional_>
<termo> 
<termo_>
<fator>
<aritmetica>
<aritmetica_>
<operador_relacional>
<mais_intrucoes_lista>
<tipo_declaracao>
<valor_declaracao>
<mais_id_lista>
<mais_expressoes_lista>
<mais_comando_lista>
#Grammar
<programa>::= #15 pr_fun pr_main "{"<lista_intrucoes>"}" #16;
<lista_intrucoes>::= <intrucoes> <mais_intrucoes_lista>;
<mais_intrucoes_lista>::= <lista_intrucoes> | î;
<intrucoes>::= <declaracoes_constantes>|<declaracao_variaveis>|<comando>;
<declaracoes_constantes>::= pr_val <lista_id> <tipo_declaracao> ";";

<tipo_declaracao>::= ":"<tipo> #30 #31 <valor_declaracao> | "=" <valor>;
<valor_declaracao>::= "=" <valor> | î;
<declaracao_variaveis>::= pr_var <lista_id> <tipo_declaracao> ";";

<lista_id>::= identificador #32 <mais_id_lista>;
<mais_id_lista>::= "," <lista_id> | î;
<tipo>::= pr_int | pr_float | pr_char | pr_string | pr_boolean;
<valor>::= constante_int | constante_float | constante_char | constante_string | pr_true | pr_false;
<comando>::= <atribuicao> | <entrada_dados> | <saida_dados> | <selecao> | <repeticao> | pr_break";";
<atribuicao>::= identificador #32 "=" <expressao> #34 ";";
<entrada_dados>::= pr_readln "("<opcional_const_string> <lista_id> #35 ")" ";";
<opcional_const_string>::= constante_string #22 #14 "," | î;
<saida_dados>::= pr_print "(" <lista_expressoes> ")" ";" | pr_println "(" <lista_expressoes> ")" ";" #17;
<lista_expressoes>::= <expressao> #14 <mais_expressoes_lista>;
<mais_expressoes_lista>::= "," <lista_expressoes> | î;
<selecao>::= pr_if "("<expressao>")" #24 <lista_comandos> <opcional_selecao_else> pr_end #26 ";";
<opcional_selecao_else>::= pr_else #25 <lista_comandos> | î ;
<repeticao>::= #27 pr_do <lista_comandos> pr_while "("<expressao>")" #28 pr_end ";";
<lista_comandos>::= <comando> <mais_comando_lista>;
<mais_comando_lista>::= <lista_comandos> | î;
<expressao>::= <elemento> <expressao_> ;
<expressao_>::= î | "&&" <elemento> #18 <expressao_> | "||" <elemento> #19 <expressao_> ;
<elemento>::= <relacional> | pr_true #11 | pr_false #12 | "!" <elemento> #13;
<relacional>::= <aritmetica> <relacional_> ;
<relacional_>::= î | <operador_relacional> #9 <aritmetica> #10;
<operador_relacional> ::= "==" | "!=" | "<" | ">" ;
<aritmetica>::= <termo> <aritmetica_> ;
<aritmetica_>::= î | "+" <termo> #1 <aritmetica_> | "-" <termo> #2 <aritmetica_> ;
<termo>::= <fator> <termo_> ;
<termo_>::= î | "*" <fator> #3 <termo_> | "/" <fator> #4 <termo_> | "%" <fator> #20 <termo_> ;
<fator>::= identificador #33 | constante_int #5| constante_float #6| constante_char #21| 
	constante_string #22| "(" <expressao> ")" | "+" <fator> #7| "-" <fator> #8;

