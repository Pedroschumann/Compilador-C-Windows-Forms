public class ParserConstants : Constants
{
    public static int START_SYMBOL = 47;

    public static int FIRST_NON_TERMINAL    = 47;
    public static int FIRST_SEMANTIC_ACTION = 82;

    public static int[,] PARSER_TABLE =
    {
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1,  1, -1, -1, -1, -1, -1, -1,  1,  1, -1, -1, -1, -1, -1,  1, -1, -1,  1,  1,  1, -1, -1,  1,  1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1,  6, -1, -1, -1, -1, -1, -1,  6,  6, -1, -1, -1, -1, -1,  6, -1, -1,  6,  6,  6, -1, -1,  4,  5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 13, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, 20, 18, -1, -1, -1, -1, -1, 17, -1, -1, 16, -1, -1, -1, -1, 19, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, 21, 22, 23, 24, -1, -1, -1, -1, -1, -1, 26, -1, -1, -1, -1, -1, -1, -1, -1, -1, 25, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 27, -1, -1, -1, -1, -1, -1, 32, 31, -1, -1, -1, -1, -1, 30, -1, -1, 29, 29, 28, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 33, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 34, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 36, -1, -1, -1, 35, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 37, 38, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 39, 39, 39, 39, 39, -1, -1, -1, -1, -1, -1, 39, -1, -1, -1, -1, -1, -1, -1, -1, -1, 39, -1, -1, -1, -1, -1, -1, -1, 39, -1, -1, -1, -1, -1, -1, -1, 39, 39, -1, -1, -1, -1, -1, 39 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 42, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 43, 44, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, 45, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 46, -1, -1, -1, -1, -1, -1, 46, 46, -1, -1, -1, -1, -1, 46, -1, -1, 46, 46, 46, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 49, 49, 49, 49, 49, -1, -1, -1, -1, -1, -1, 49, -1, -1, -1, -1, -1, -1, -1, -1, -1, 49, -1, -1, -1, -1, -1, -1, -1, 49, -1, -1, -1, -1, -1, -1, -1, 49, 49, -1, -1, -1, -1, -1, 49 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 50, 50, -1, -1, 50, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 51, 52, -1 },
        { -1, 53, 53, 53, 53, 53, -1, -1, -1, -1, -1, -1, 55, -1, -1, -1, -1, -1, -1, -1, -1, -1, 54, -1, -1, -1, -1, -1, -1, -1, 53, -1, -1, -1, -1, -1, -1, -1, 53, 53, -1, -1, -1, -1, -1, 56 },
        { -1, 57, 57, 57, 57, 57, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 57, -1, -1, -1, -1, -1, -1, -1, 57, 57, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 58, 58, -1, -1, 58, -1, -1, 59, 59, 59, 59, -1, -1, -1, -1, -1, 58, 58, -1 },
        { -1, 68, 68, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 68, -1, -1, -1, -1, -1, -1, -1, 68, 68, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 69, 69, -1, -1, 69, -1, -1, 69, 69, 69, 69, 69, 69, 70, 71, 72, 69, 69, -1 },
        { -1, 73, 74, 75, 76, 77, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 78, -1, -1, -1, -1, -1, -1, -1, 79, 80, -1, -1, -1, -1, -1, -1 },
        { -1, 64, 64, 64, 64, 64, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 64, -1, -1, -1, -1, -1, -1, -1, 64, 64, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 65, 65, -1, -1, 65, -1, -1, 65, 65, 65, 65, 66, 67, -1, -1, -1, 65, 65, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 60, 61, 62, 63, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1,  2, -1, -1, -1, -1, -1, -1,  2,  2, -1, -1, -1, -1, -1,  2, -1, -1,  2,  2,  2, -1, -1,  2,  2, -1, -1, -1, -1, -1, -1, -1, -1,  3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  8, -1, -1,  9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 15, 14, -1, 15, -1, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 40, -1, -1, -1, 41, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 47, -1, -1, -1, -1, -1, -1, 47, 47, 48, 48, -1, -1, -1, 47, -1, -1, 47, 47, 47, -1, -1, -1, -1, 48, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }    
    };

    public readonly int[][] PRODUCTIONS = 
    {
        new[] {  97,  15,  18,  33,  48,  34,  98 },
        new[] {  49,  76 },
        new[] {  48 },
        new[] {   0 },
        new[] {  50 },
        new[] {  51 },
        new[] {  55 },
        new[] {  24,  52,  77,  29 },
        new[] {  27,  53, 112, 113,  78 },
        new[] {  30,  54 },
        new[] {  30,  54 },
        new[] {   0 },
        new[] {  25,  52,  77,  29 },
        new[] {   2, 114, 79 },
        new[] {  28,  52 },
        new[] {   0 },
        new[] {  17 },
        new[] {  14 },
        new[] {   8 },
        new[] {  22 },
        new[] {   7 },
        new[] {   3 },
        new[] {   4 },
        new[] {   5 },
        new[] {   6 },
        new[] {  23 },
        new[] {  13 },
        new[] {  56 },
        new[] {  57 },
        new[] {  59 },
        new[] {  61 },
        new[] {  63 },
        new[] {   9,  29 },
        new[] {   2, 114, 30,  65, 116,  29 },
        new[] {  21,  31,  58,  52, 117,  32,  29 },
        new[] {   6, 104, 96, 28 },
        new[] {   0 },
        new[] {  19,  31,  60,  32,  29 },
        new[] {  20,  31,  60,  32,  29,  99 },
        new[] {  65,  96,  80 },
        new[] {  28,  60 },
        new[] {   0 },
        new[] {  16,  31,  65,  32, 106,  64,  62,  12, 108, 29 },
        new[] {  11, 107, 64 },
        new[] {   0 },
        new[] {  109, 10,  64,  26,  31,  65,  32, 110,  12,  29 },
        new[] {  55,  81 },
        new[] {  64 },
        new[] {   0 },
        new[] {  67,  66 },
        new[] {   0 },
        new[] {  44,  67, 100,  66 },
        new[] {  45,  67, 101,  66 },
        new[] {  68 },
        new[] {  23,  93 },
        new[] {  13,  94 },
        new[] {  46,  67,  95 },
        new[] {  73,  69 },
        new[] {   0 },
        new[] {  75,  91,  73,  92 },
        new[] {  35 },
        new[] {  36 },
        new[] {  37 },
        new[] {  38 },
        new[] {  70,  74 },
        new[] {   0 },
        new[] {  39,  70,  83,  74 },
        new[] {  40,  70,  84,  74 },
        new[] {  72,  71 },
        new[] {   0 },
        new[] {  41,  72,  85,  71 },
        new[] {  42,  72,  86,  71 },
        new[] {  43,  72, 102,  71 },
        new[] {   2, 115 },
        new[] {   3,  87 },
        new[] {   4,  88 },
        new[] {   5, 103 },
        new[] {   6, 104 },
        new[] {  31,  65,  32 },
        new[] {  39,  72,  89 },
        new[] {  40,  72,  90 }
    };

    public static String[] PARSER_ERROR =
    {
        "",
        " esperado EOF",
        " esperado id",
        " esperado constante_int",
        " esperado constante_float",
        " esperado constante_char",
        " esperado constante_string",
        " esperado boolean",
        " esperado char",
        " esperado break",
        " esperado do",
        " esperado else",
        " esperado end",
        " esperado false",
        " esperado float",
        " esperado fun",
        " esperado if",
        " esperado int",
        " esperado main",
        " esperado print",
        " esperado println",
        " esperado readln",
        " esperado string",
        " esperado true",
        " esperado val",
        " esperado var",
        " esperado while",
        " esperado :",
        " esperado ,",
        " esperado ;",
        " esperado =",
        " esperado (",
        " esperado )",
        " esperado {",
        " esperado }",
        " esperado ==",
        " esperado !=",
        " esperado <",
        " esperado >",
        " esperado +",
        " esperado -",
        " esperado *",
        " esperado /",
        " esperado %",
        " esperado &&",
        " esperado ||",
        " esperado !",
        //"<programa> inválido",
        " esperado fun",
        //"<lista_intrucoes> inválido",
        " esperado id  break  do  if  print  println  readln  val  var",
        //"<intrucoes> inválido",
        " esperado id  break  do  if  print  println  readln  val  var",
        //"<declaracoes_constantes> inválido",
        " esperado val",
        //"<declaracao_variaveis> inválido",
        " esperado var",
        //"<lista_id> inválido",
        " esperado id",
        //"<tipo> inválido",
        " esperado boolean  char  float  int  string",
        //"<valor> inválido",
        " esperado constante_int  constante_float  constante_char  constante_string  false  true",
        //"<comando> inválido",
        " esperado id  break  do  if  print  println  readln  ",
        //"<atribuicao> inválido",
        " esperado id",
        //"<entrada_dados> inválido",
        " esperado readln",
        //"<opcional_const_string> inválido",
        " esperado id  constante_string",
        //"<saida_dados> inválido",
        " esperado print  println",
        //"<lista_expressoes> inválido",
        " esperado expressão",
        //"<selecao> inválido",
        " esperado if",
        //"<opcional_selecao_else> inválido",
        " esperado else  end  ",
        //"<repeticao> inválido",
        " esperado do",
        //"<lista_comandos> inválido",
        " esperado id  break  do  if  print  println  readln",
        //"<expressao> inválido",
        " esperado expressão",
        //"<expressao_> inválido",
        " esperado expressão",
        //"<elemento> inválido",
        " esperado expressão",
        //relacional> inválido",
        " esperado expressão",
        //"<relacional_> inválido",
        " esperado expressão",
        //"<termo> inválido",
        " esperado expressão",
        //"<termo_> inválido",
        " esperado expressão",
        //"<fator> inválido",
        " esperado expressão",
        //"<aritmetica> inválido",
        " esperado expressão",
        //"<aritmetica_> inválido",
        " esperado expressão",
        //"<opdor_relacional> inválido",
        " esperado ==  !=  <  >",
        //"<mais_intrucoes_lista> inválido",
        " esperado id  break  do  if print  println  readln  val  var  }",
        //"<tipo_declaracao> inválido",
        " esperado :  =",
        //"<valor_declaracao> inválido",
        " esperado ;  =",
        //"<mais_id_lista> inválido",
        " esperado :  ,  =  )",
        //"<mais_expressoes_lista> inválido",
        " esperado ,  )",
        //"<mais_comando_lista> inválido"
        " esperado id  break  do  else  end  if  print  printl  readln  while",
    };
}
